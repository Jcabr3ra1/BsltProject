# DOCUMENTACIÓN BSLTPROJECT - PASO A PASO

## ARQUITECTURA DEL SISTEMA

BsltProject es una aplicación bancaria con arquitectura de microservicios que consta de:

1. **Frontend**: Aplicación Angular
2. **API Gateway (Puerto 7777)**: Aplicación FastAPI que enruta las peticiones
3. **Servicio de Seguridad (Puerto 8080)**: Aplicación Spring Boot que maneja autenticación y seguridad
4. **Servicio Financiero**: Servicio separado para operaciones financieras

El API Gateway actúa como punto de entrada central y enruta las solicitudes a los microservicios apropiados.

## CONFIGURACIÓN INICIAL

### 1. Configuración del Servicio de Seguridad

El servicio de seguridad debe ejecutarse en el puerto 8080 para mantener la compatibilidad con el API Gateway.

```bash
# Iniciar el servicio de seguridad
cd bslproject-seguridad/BsltProject
./mvnw spring-boot:run
```

### 2. Configuración del API Gateway

El API Gateway se ejecuta en el puerto 7777 y redirige las peticiones a los servicios correspondientes.

```bash
# Iniciar el API Gateway
cd api-gateway
python main.py
```

### 3. Configuración del Frontend

```bash
# Iniciar el frontend Angular
cd bslproject-bank
ng serve
```

## USUARIOS Y ROLES

Se han creado 4 usuarios de prueba en la base de datos MongoDB:

1. **admin@bsltproject.com** - Rol: ADMIN - Estado: ACTIVO
2. **user@bsltproject.com** - Rol: USER - Estado: ACTIVO
3. **guest@bsltproject.com** - Rol: GUEST - Estado: ACTIVO
4. **moderator@bsltproject.com** - Rol: MODERATOR - Estado: ACTIVO

Todos los usuarios tienen la misma contraseña (contraseña en texto plano no disponible).

### Permisos por Rol:
- **ADMIN**: Todos los permisos del sistema (44 permisos)
- **USER**: Permisos básicos (9 permisos)
- **GUEST**: Permisos de solo lectura (8 permisos)
- **MODERATOR**: Permisos de moderación (18 permisos)

## ENDPOINTS DEL SERVICIO DE SEGURIDAD

### Autenticación

- **POST /seguridad/autenticacion/login**: Iniciar sesión y obtener token JWT
- **POST /seguridad/autenticacion/registro**: Registrar un nuevo usuario
- **POST /seguridad/autenticacion/refrescar**: Refrescar token JWT
- **POST /seguridad/cerrar-sesion**: Cerrar sesión y revocar refresh token

### Usuarios

- **GET /seguridad/usuarios**: Obtener todos los usuarios
- **GET /seguridad/usuarios/{id}**: Obtener usuario por ID
- **PUT /seguridad/usuarios/{id}**: Actualizar usuario
- **DELETE /seguridad/usuarios/{id}**: Eliminar usuario
- **PUT /seguridad/usuarios/{userId}/roles/{roleId}**: Asignar rol a usuario
- **PUT /seguridad/usuarios/{userId}/estados/{stateId}**: Asignar estado a usuario

### Roles

- **GET /seguridad/roles**: Obtener todos los roles
- **GET /seguridad/roles/{id}**: Obtener rol por ID
- **GET /seguridad/roles/name/{name}**: Obtener rol por nombre
- **POST /seguridad/roles**: Crear rol
- **PUT /seguridad/roles/{id}**: Actualizar rol
- **DELETE /seguridad/roles/{id}**: Eliminar rol
- **GET /seguridad/roles/{id}/permissions**: Obtener permisos de rol
- **GET /seguridad/roles/{id}/users**: Obtener usuarios con rol

### Permisos

- **GET /seguridad/permisos**: Obtener todos los permisos
- **GET /seguridad/permisos/{id}**: Obtener permiso por ID
- **GET /seguridad/permisos/nombre/{nombre}**: Obtener permiso por nombre
- **POST /seguridad/permisos**: Crear permiso
- **PUT /seguridad/permisos/{id}**: Actualizar permiso
- **DELETE /seguridad/permisos/{id}**: Eliminar permiso

### Estados

- **GET /seguridad/estados**: Obtener todos los estados
- **GET /seguridad/estados/{id}**: Obtener estado por ID
- **POST /seguridad/estados**: Crear estado
- **PUT /seguridad/estados/{id}**: Actualizar estado
- **DELETE /seguridad/estados/{id}**: Eliminar estado

### Activación

- **GET /activacion/usuarios**: Listar usuarios para activación
- **GET /activacion/estados**: Listar estados para activación
- **POST /activacion/activar-usuario**: Activar usuario por email
- **POST /activacion/activar/{id}**: Activar usuario por ID
- **POST /activacion/reset-password**: Resetear contraseña
- **POST /activacion/crear-admin**: Crear usuario administrador

## ENDPOINTS DEL SERVICIO FINANCIERO

### Cuentas

- **GET /finanzas/cuentas**: Obtener todas las cuentas
- **GET /finanzas/cuentas/{id}**: Obtener cuenta por ID
- **POST /finanzas/cuentas**: Crear cuenta
- **PUT /finanzas/cuentas/{id}/saldo**: Actualizar saldo de cuenta
- **PUT /finanzas/cuentas/{accountId}/usuario/{userId}**: Asignar cuenta a usuario

### Bolsillos

- **GET /finanzas/bolsillos**: Obtener todos los bolsillos
- **GET /finanzas/bolsillos/{id}**: Obtener bolsillo por ID
- **POST /finanzas/bolsillos**: Crear bolsillo
- **PUT /finanzas/bolsillos/{pocketId}/cuentas/{accountId}**: Asignar bolsillo a cuenta

### Transacciones

- **GET /finanzas/transacciones**: Obtener todas las transacciones
- **GET /finanzas/transacciones/{id}**: Obtener transacción por ID
- **POST /finanzas/transacciones**: Crear transacción
- **PUT /finanzas/transacciones/{id}/cancel**: Cancelar transacción
- **GET /finanzas/transacciones/historial**: Obtener historial de transacciones

### Tipos de Transacción

- **GET /finanzas/tipos-transaccion**: Obtener todos los tipos de transacción
- **GET /finanzas/tipos-transaccion/{id}**: Obtener tipo de transacción por ID

### Tipos de Movimiento

- **GET /finanzas/tipos-movimiento**: Obtener todos los tipos de movimiento
- **GET /finanzas/tipos-movimiento/{id}**: Obtener tipo de movimiento por ID

### Transferencias

- **POST /finanzas/transferencias/cuenta-cuenta**: Transferencia de cuenta a cuenta
- **POST /finanzas/transferencias/cuenta-bolsillo**: Transferencia de cuenta a bolsillo
- **POST /finanzas/transferencias/bolsillo-cuenta**: Transferencia de bolsillo a cuenta

### Consignaciones

- **POST /finanzas/consignaciones/banco-cuenta**: Consignación de banco a cuenta
- **POST /finanzas/consignaciones/banco-bolsillo**: Consignación de banco a bolsillo

### Retiros

- **POST /finanzas/retiros/cuenta-banco**: Retiro de cuenta a banco

## COLECCIONES DE POSTMAN

Se han creado dos colecciones de Postman para facilitar el acceso y prueba de todos los endpoints de la API:

### 1. BsltProject_Security_API.json
Contiene todos los endpoints relacionados con el servicio de seguridad.

### 2. BsltProject_Finance_API.json
Contiene todos los endpoints relacionados con el servicio de finanzas.

## CÓMO USAR LAS COLECCIONES DE POSTMAN

1. Abrir Postman
2. Hacer clic en "Import" y seleccionar los archivos JSON
3. Las colecciones aparecerán en el panel izquierdo
4. Antes de usar los endpoints, es necesario:
   - Iniciar sesión usando el endpoint de login para obtener un token JWT
   - Actualizar la variable `token` en la colección con el token obtenido
   - Actualizar otras variables como `userId`, `cuentaId`, etc. según sea necesario

## PROBLEMAS COMUNES Y SOLUCIONES

### Problema de Autenticación
El problema de autenticación en la aplicación se debe a que las cuentas de usuario están marcadas como inactivas o sin permisos en la base de datos MongoDB. Se ha creado un ControladorActivacion para permitir activar usuarios existentes sin tener que modificar directamente la base de datos.

### Solución:
Utilizar el endpoint `/activacion/activar-usuario` o `/activacion/activar/{id}` para activar usuarios.

## MEJORAS IMPLEMENTADAS

1. **Seguridad Mejorada**: Se ha asegurado el endpoint `/activacion/crear-admin` para que solo los usuarios con rol ADMIN puedan acceder.
2. **Gestión de Usuarios**: Se ha implementado un método para eliminar usuarios a través de la API.
3. **Colecciones de Postman**: Se han creado colecciones de Postman para facilitar las pruebas de la API.

## PRÓXIMOS PASOS

1. **Documentación Completa**: Crear documentación detallada de la API con Swagger.
2. **Pruebas Automatizadas**: Implementar pruebas automatizadas para todos los endpoints.
3. **Mejoras de Seguridad**: Implementar autenticación de dos factores y mejorar la gestión de tokens.
4. **Monitoreo**: Implementar herramientas de monitoreo para supervisar el rendimiento y la disponibilidad de los servicios.
